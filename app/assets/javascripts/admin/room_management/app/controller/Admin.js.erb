<%url_helper = ::Rails.application.routes.url_helpers%>

Ext.define('RoomManagement.controller.Admin',{
    extend:'Ext.app.Controller',
    views:[
        'RoomManagement.view.Viewport',
        'RoomManagement.view.admin.RoomManagement',
        'RoomManagement.view.admin.AdminConfigLeftPanel',
        'RoomManagement.view.admin.AdminConfigRightPanel',
        'RoomManagement.view.admin.RoomTypePanel',
        'RoomManagement.view.admin.RoomSchedulePanel',
        'RoomManagement.view.admin.RoomScheduleForm'
    ],
    models:[
        'RoomManagement.model.RoomType',
        'RoomManagement.model.RoomSchedule',
        'RoomManagement.model.CalendarScheduleModel'
    ],
    stores:[
        'RoomManagement.store.RoomTypes',
        'RoomManagement.store.CalendarSchedule'
    ],
    refs:[
        {
            ref:'roomSchedulePanel',
            selector:'roomSchedulePanel'
        },
        {
            ref:'roomScheduleForm',
            selector:'roomScheduleForm'
        }
    ],
    init:function(){
        this.listen({
            controller:{},
            component:{
                'roomSchedulePanel':{
                    render:this.loadNewSchedule
                },
                'roomScheduleForm button[itemId="save"]':{
                    click:this.saveRoomSchedule
                }
            }
        })
    },
    saveRoomSchedule:function(button){
        var newRoomScheduleForm = this.getRoomScheduleForm().getForm();
        newRoomScheduleForm.updateRecord();

        var newScheduleRecord = newRoomScheduleForm.getRecord().getData();
        var newScheduleRecordJson = Ext.encode(newScheduleRecord);

        var authencityTokenParam = $('meta[name="csrf-token"]').attr('content');

        var requestParams = {
            authenticity_token:authencityTokenParam,
            newScheduleRecord:newScheduleRecordJson
        };

        Ext.Ajax.request({
            url:'<%=url_helper.admin_room_schedule_index_path%>',
            params:requestParams,
            method:'POST',
            scope:this,
            success:function(response){
                console.log(response);
                var result = Ext.decode(response.responseText);
                var result_message = result.message;
                Ext.Msg.show({
                    title:'Alert',
                    msg:result_message,
                    buttons:Ext.Msg.OK
                });
            },
            failure:function(form,action){
                var result_message = action.result.message;
                Ext.Msg.show({
                    title:'Alert',
                    msg:result_message,
                    buttons:Ext.Msg.OK
                });
            }
        });

    },
    loadNewSchedule:function(){

        var newSchedule = Ext.create('RoomManagement.model.RoomSchedule',{
            room_type_id:1,
            from_date:new Date(),
            to_date:new Date()
        });

        this.getRoomScheduleForm().getForm().loadRecord(newSchedule);

        this.getCalendarData();

    },
    getCalendarData:function(){
        var calScheduleStore = this.getRoomManagementStoreCalendarScheduleStore();

        calendarScheduleEvents = {};
        calScheduleStore.on('load',function(){
            calScheduleStore.each(function(each_cal_sch){
                var availability_info =
                    each_cal_sch.get('room_type') + ":" + each_cal_sch.get('availability');
//                codropsEvents["\""+each_cal_sch.get('date')+"\""] = availability_info;
                calendarScheduleEvents[each_cal_sch.get('date')] = availability_info;
            })

            $(function() {

                var cal = $( '#calendar' ).calendario( {
                    onDayClick : function( $el, $contentEl, dateProperties ) {
                        for( var key in dateProperties ) {
                            console.log( key + ' = ' + dateProperties[ key ] );
                        }
                    },
                    caldata : calendarScheduleEvents,
                    displayWeekAbbr : true,
                    // choose between values in options.months or options.monthabbrs
                    displayMonthAbbr : true
                } ),
                $month = $( '#custom-month' ).html( cal.getMonthName() ),
                $year = $( '#custom-year' ).html( cal.getYear() );

                $( '#custom-next' ).on( 'click', function() {
                    cal.gotoNextMonth( updateMonthYear );
                } );
                $( '#custom-prev' ).on( 'click', function() {
                    cal.gotoPreviousMonth( updateMonthYear );
                } );
                $( '#custom-current' ).on( 'click', function() {
                    cal.gotoNow( updateMonthYear );
                } );

                function updateMonthYear() {
                    $month.html( cal.getMonthName() );
                    $year.html( cal.getYear() );
                }

                // you can also add more data later on. As an example:
                /*
                 someElement.on( 'click', function() {

                 cal.setData( {
                 '03-01-2013' : '<a href="#">testing</a>',
                 '03-10-2013' : '<a href="#">testing</a>',
                 '03-12-2013' : '<a href="#">testing</a>'
                 } );
                 // goes to a specific month/year
                 cal.goto( 3, 2013, updateMonthYear );

                 } );
                 */

            });

        });


    }

    // Admin Functions

})


















